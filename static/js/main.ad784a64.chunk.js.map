{"version":3,"sources":["App.js","Weapons.js","index.js"],"names":["PixelPrice","BN","NearConfig","networkId","nodeUrl","contractName","walletUrl","Chipmunk","role","aria-label","className","Acorn","Seedling","Berry","BoardHeight","BoardWidth","CellWidth","CellHeight","MaxWorkTime","intToColor","c","toString","padStart","intToColorWithAlpha","a","Math","round","rgbaToInt","cr","cg","cb","ca","bgColor","bb","bg","br","imgColorToInt","int2hsv","cInt","substr","r","parseInt","g","b","v","max","min","h","transparentColor","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","WeaponsCheat","App","props","colors","map","toLowerCase","currentColor","substring","state","connected","signedIn","accountId","pendingPixels","boardLoaded","selectedCell","alpha","pickerColor","pickingColor","owners","accounts","highlightedAccountIndex","selectedOwnerIndex","farmingAcorn","weaponsOn","weaponsCodePosition","_buttonDown","_oldCounts","_numFailedTxs","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_accounts","_initNear","then","setState","_accountId","ircAccountId","replace","canvas","this","current","getContext","click","rendering","drawImg","pickColor","saveColor","drawPixel","mouseMove","e","x","y","touches","rect","target","getBoundingClientRect","targetTouches","clientX","left","clientY","top","offsetX","offsetY","trunc","clientWidth","clientHeight","cell","JSON","stringify","renderCanvas","preventDefault","addEventListener","mouseDown","unselectCell","mouseUp","buttons","document","altKey","enablePickColor","key","disablePickColor","slice","_contract","draw","console","log","concat","Promise","all","refreshBoard","refreshAccountStats","forEach","p","_pending","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","account","chipmunkBalance","chipmunkNeeded","img","imageData","w","width","height","d","Uint32Array","data","buffer","j","imgColor","account_id","accountIndex","account_index","parseFloat","chipmunk_balance","_pixelCost","acornBalance","acorn_balance","numPixels","num_pixels","farmingPreference","farming_preference","startTime","chipmunkPixels","acornPixels","chipmunkRewardPerMs","acornRewardPerMs","get_account","parseAccount","get_account_by_index","getAccount","clearInterval","setInterval","t","Object","assign","keyStore","nearAPI","BrowserLocalStorageKeyStore","deps","near","_keyStore","_near","_walletConnection","getAccountId","_account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","_refreshOwners","counts","sortedKeys","keys","sort","getAccountByIndex","ctx","fillStyle","fillRect","beginPath","strokeStyle","lineWidth","stroke","closePath","arc","PI","requestSignIn","signOut","rgb","changeColor","hsl","newColor","index","indexOf","splice","hex","hsv","amount","requiredBalance","muln","buy_tokens","select_farming_preference","berry","content","onClick","logOut","Balance","detailed","onChange","switchBerry","checked","offColor","onColor","uncheckedIcon","checkedIcon","buyTokens","hueColorChange","alphaColorChange","triangle","onChangeComplete","style","marginBottom","aria-hidden","weapons","renderIt","renderImg","class","href","ref","Leaderboard","setHover","title","frameBorder","src","Component","fraction","chipmunkFarm","acornFarm","toFixed","owner","Owner","isSelected","isHighlighted","onMouseEnter","onMouseLeave","Account","shortAccountId","Weapons","seedlingNeeded","lockedAspect","sourceImage","Image","onload","clearRect","imageSmoothingQuality","drawImage","getImageData","reduce","sum","f","reader","FileReader","readAsDataURL","naturalWidth","naturalHeight","aspect","event","result","value","type","onFilesChange","onError","onFilesError","multiple","accepts","minFileSize","clickable","updateVal","changeLockedAspect","disabled","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ad784a64.chunk.js","sourcesContent":["import \"./App.scss\";\r\nimport \"./gh-fork-ribbon.css\";\r\nimport React from 'react';\r\nimport BN from 'bn.js';\r\nimport * as nearAPI from 'near-api-js'\r\nimport { AlphaPicker, HuePicker, GithubPicker } from 'react-color'\r\nimport Switch from \"react-switch\"\r\nimport {Weapons} from \"./Weapons\";\r\n\r\nconst PixelPrice = new BN(\"10000000000000000000000\");\r\nconst IsMainnet = true; // window.location.hostname === \"berryclub.io\";\r\nconst TestNearConfig = {\r\n  networkId: 'testnet',\r\n  nodeUrl: 'https://rpc.testnet.near.org',\r\n  contractName: 'hibernationharvest.testnet',\r\n  walletUrl: 'https://wallet.testnet.near.org',\r\n};\r\nconst MainNearConfig = {\r\n  networkId: 'mainnet',\r\n  nodeUrl: 'https://rpc.mainnet.near.org',\r\n  contractName: 'berryclub.ek.near',\r\n  walletUrl: 'https://wallet.near.org',\r\n};\r\nconst NearConfig = IsMainnet ? TestNearConfig : MainNearConfig;\r\n\r\nconst Chipmunk = <span role=\"img\" aria-label=\"chipmunk\" className=\"berry\">🐿️</span>;\r\nconst Acorn = <span role=\"img\" aria-label=\"acorn\" className=\"berry\">🌰</span>;\r\nconst Seedling = <span role=\"img\" aria-label=\"seedling\" className=\"berry\">🌱</span>;\r\nconst Pepper = <span role=\"img\" aria-label=\"pepper\" className=\"berry\">🌶️</span>;\r\n\r\nconst Berry = {\r\n  Chipmunk: 'Chipmunk',\r\n  Acorn: 'Acorn',\r\n};\r\n\r\nconst BoardHeight = 50;\r\nconst BoardWidth = 50;\r\nconst NumLinesPerFetch = 10;\r\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\r\nconst CellWidth = 12;\r\nconst CellHeight = 12;\r\nconst MaxNumColors = 31;\r\nconst BatchOfPixels = 100;\r\n// 500 ms\r\nconst BatchTimeout = 500;\r\nconst RefreshBoardTimeout = 1000;\r\nconst MaxWorkTime = 10 * 60 * 1000;\r\n\r\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\r\nconst intToColorWithAlpha = (c, a) => `#${c.toString(16).padStart(6, '0')}${Math.round(255 * a).toString(16).padStart(2, '0')}`;\r\n\r\nconst rgbaToInt = (cr, cg, cb, ca, bgColor) => {\r\n  const bb = (bgColor & 255);\r\n  const bg = ((bgColor >> 8) & 255);\r\n  const br = ((bgColor >> 16) & 255);\r\n\r\n  const r = Math.round(cr * ca + br * (1 - ca));\r\n  const g = Math.round(cg * ca + bg * (1 - ca));\r\n  const b = Math.round(cb * ca + bb * (1 - ca));\r\n  return (r << 16) + (g << 8) + b;\r\n}\r\n\r\nconst imgColorToInt = (c, bgColor) => {\r\n  const cr = (c & 255);\r\n  const cg = ((c >> 8) & 255);\r\n  const cb = ((c >> 16) & 255);\r\n  const ca = ((c >> 24) & 255) / 255;\r\n  return rgbaToInt(cr, cg, cb, ca, bgColor);\r\n}\r\n\r\n  const int2hsv = (cInt) => {\r\n  cInt = intToColor(cInt).substr(1)\r\n  const r = parseInt(cInt.substr(0, 2), 16) / 255\r\n  const g = parseInt(cInt.substr(2, 2), 16) / 255\r\n  const b = parseInt(cInt.substr(4, 2), 16) / 255\r\n  let v=Math.max(r,g,b), c=v-Math.min(r,g,b);\r\n  let h= c && ((v===r) ? (g-b)/c : ((v===g) ? 2+(b-r)/c : 4+(r-g)/c));\r\n  return [60*(h<0?h+6:h), v&&c/v, v];\r\n}\r\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\r\nconst generateGamma = (hue) => {\r\n  const gammaColors = [];\r\n  for (let i = 0; i < MaxNumColors; ++i) {\r\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\r\n  }\r\n  return gammaColors;\r\n};\r\nconst decodeLine = (line) => {\r\n  let buf = Buffer.from(line, 'base64');\r\n  if (buf.length !== ExpectedLineLength) {\r\n    throw new Error(\"Unexpected encoded line length\");\r\n  }\r\n  let pixels = []\r\n  for (let i = 4; i < buf.length; i += 8) {\r\n    let color = buf.readUInt32LE(i);\r\n    let ownerIndex = buf.readUInt32LE(i + 4);\r\n    pixels.push({\r\n      color,\r\n      ownerIndex,\r\n    })\r\n  }\r\n  return pixels;\r\n};\r\n\r\nconst WeaponsCheat = \"idkfa\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const colors = [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase());\r\n    // const currentColor = parseInt(colors[Math.floor(Math.random() * colors.length)].substring(1), 16);\r\n    const currentColor = parseInt(colors[0].substring(1), 16);\r\n    const defaultAlpha = 0.25;\r\n\r\n    this.state = {\r\n      connected: false,\r\n      signedIn: false,\r\n      accountId: null,\r\n      pendingPixels: 0,\r\n      boardLoaded: false,\r\n      selectedCell: null,\r\n      alpha: defaultAlpha,\r\n      currentColor,\r\n      pickerColor: intToColorWithAlpha(currentColor, defaultAlpha),\r\n      colors,\r\n      gammaColors: generateGamma(0),\r\n      pickingColor: false,\r\n      owners: [],\r\n      accounts: {},\r\n      highlightedAccountIndex: -1,\r\n      selectedOwnerIndex: false,\r\n      farmingAcorn: false,\r\n      weaponsOn: false,\r\n      weaponsCodePosition: 0,\r\n    };\r\n\r\n    this._buttonDown = false;\r\n    this._oldCounts = {};\r\n    this._numFailedTxs = 0;\r\n    this._balanceRefreshTimer = null;\r\n    this.canvasRef = React.createRef();\r\n    this._context = false;\r\n    this._lines = false;\r\n    this._queue = [];\r\n    this._pendingPixels = [];\r\n    this._refreshBoardTimer = null;\r\n    this._sendQueueTimer = null;\r\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\r\n    this._accounts = {};\r\n\r\n    this._initNear().then(() => {\r\n      this.setState({\r\n        connected: true,\r\n        signedIn: !!this._accountId,\r\n        accountId: this._accountId,\r\n        ircAccountId: this._accountId.replace('.', '_')\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvasRef.current;\r\n    this._context = canvas.getContext('2d');\r\n\r\n    const click = async () => {\r\n      if (this.state.rendering) {\r\n        await this.drawImg(this.state.selectedCell);\r\n      } else if (this.state.pickingColor) {\r\n        this.pickColor(this.state.selectedCell);\r\n      } else {\r\n        this.saveColor();\r\n        await this.drawPixel(this.state.selectedCell);\r\n      }\r\n    };\r\n\r\n    const mouseMove = (e) => {\r\n      let x, y;\r\n      if ('touches' in e) {\r\n        if (e.touches.length > 1) {\r\n          return true;\r\n        } else {\r\n          const rect = e.target.getBoundingClientRect();\r\n          x = e.targetTouches[0].clientX - rect.left;\r\n          y = e.targetTouches[0].clientY - rect.top;\r\n        }\r\n      } else {\r\n        x = e.offsetX;\r\n        y = e.offsetY;\r\n      }\r\n      x = Math.trunc(x / e.target.clientWidth * BoardWidth);\r\n      y = Math.trunc(y / e.target.clientHeight * BoardWidth);\r\n      let cell = null;\r\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\r\n        cell = {x, y};\r\n      }\r\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\r\n        this.setState({\r\n          selectedCell: cell,\r\n          selectedOwnerIndex: this._lines && cell && this._lines[cell.y] && this._lines[cell.y][cell.x].ownerIndex\r\n        }, async () => {\r\n          this.renderCanvas()\r\n          if (this.state.selectedCell !== null && this._buttonDown) {\r\n            await click();\r\n          }\r\n        })\r\n      }\r\n      e.preventDefault();\r\n      return false;\r\n    };\r\n\r\n    canvas.addEventListener('mousemove', mouseMove);\r\n    canvas.addEventListener('touchmove', mouseMove);\r\n\r\n    const mouseDown = async (e) => {\r\n      this._buttonDown = true;\r\n      if (this.state.selectedCell !== null) {\r\n        await click();\r\n      }\r\n    };\r\n\r\n    canvas.addEventListener('mousedown', mouseDown);\r\n    canvas.addEventListener('touchstart', mouseDown);\r\n\r\n    const unselectCell = () => {\r\n      this.setState({\r\n        selectedCell: null,\r\n      }, () => this.renderCanvas());\r\n    }\r\n\r\n    const mouseUp = async (e) => {\r\n      this._buttonDown = false;\r\n      if ('touches' in e) {\r\n        unselectCell();\r\n      }\r\n    }\r\n\r\n    canvas.addEventListener('mouseup', mouseUp);\r\n    canvas.addEventListener('touchend', mouseUp);\r\n\r\n    canvas.addEventListener('mouseleave', unselectCell);\r\n\r\n    canvas.addEventListener('mouseenter', (e) => {\r\n      if (this._buttonDown) {\r\n        if (!('touches' in e) && !(e.buttons & 1)) {\r\n          this._buttonDown = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n      e.altKey && this.enablePickColor()\r\n    })\r\n\r\n    document.addEventListener('keyup', (e) => {\r\n      if (this.state.weaponsCodePosition < WeaponsCheat.length) {\r\n        if (e.key.toLowerCase() === WeaponsCheat[this.state.weaponsCodePosition]) {\r\n          this.setState({\r\n            weaponsCodePosition: this.state.weaponsCodePosition + 1,\r\n            weaponsOn: this.state.weaponsCodePosition + 1 === WeaponsCheat.length,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            weaponsCodePosition: 0,\r\n          });\r\n        }\r\n      }\r\n      !e.altKey && this.disablePickColor();\r\n    })\r\n  }\r\n\r\n  enablePickColor() {\r\n    this.setState({\r\n      pickingColor: true,\r\n    }, () => {\r\n      this.renderCanvas()\r\n    });\r\n  }\r\n\r\n  disablePickColor() {\r\n    this.setState({\r\n      pickingColor: false,\r\n    }, () => {\r\n      this.renderCanvas()\r\n    });\r\n  }\r\n\r\n  pickColor(cell) {\r\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\r\n      return;\r\n    }\r\n    const color = this._lines[cell.y][cell.x].color;\r\n\r\n    this.setState({\r\n      currentColor: color,\r\n      alpha: 1,\r\n      pickerColor: intToColorWithAlpha(color, 1),\r\n      gammaColors: generateGamma(int2hsv(color)[0]),\r\n      pickingColor: false,\r\n    }, () => {\r\n      this.renderCanvas()\r\n    });\r\n  }\r\n\r\n  async _sendQueue() {\r\n    const pixels = this._queue.slice(0, BatchOfPixels);\r\n    this._queue = this._queue.slice(BatchOfPixels);\r\n    this._pendingPixels = pixels;\r\n\r\n    try {\r\n      await this._contract.draw({\r\n        pixels\r\n      }, new BN(\"75000000000000\"));\r\n      this._numFailedTxs = 0;\r\n    } catch (error) {\r\n      console.log(\"Failed to send a transaction\", error);\r\n      this._numFailedTxs += 1;\r\n      if (this._numFailedTxs < 3) {\r\n        this._queue = this._queue.concat(this._pendingPixels);\r\n        this._pendingPixels = [];\r\n      } else {\r\n        this._pendingPixels = [];\r\n        this._queue = [];\r\n      }\r\n    }\r\n    try {\r\n      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\r\n    } catch (e) {\r\n      // ignore\r\n    }\r\n    this._pendingPixels.forEach((p) => {\r\n      if (this._pending[p.y][p.x] === p.color) {\r\n        this._pending[p.y][p.x] = -1;\r\n      }\r\n    });\r\n    this._pendingPixels = [];\r\n  }\r\n\r\n  async _pingQueue(ready) {\r\n    if (this._sendQueueTimer) {\r\n      clearTimeout(this._sendQueueTimer);\r\n      this._sendQueueTimer = null;\r\n    }\r\n\r\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\r\n      await this._sendQueue();\r\n    }\r\n    if (this._queue.length > 0) {\r\n      this._sendQueueTimer = setTimeout(async () => {\r\n        await this._pingQueue(true);\r\n      }, BatchTimeout);\r\n    }\r\n\r\n  }\r\n\r\n  async drawImg(cell) {\r\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\r\n      return;\r\n    }\r\n    const balance = this.state.account ? this.state.account.chipmunkBalance : 0;\r\n\r\n    if (balance - this.state.pendingPixels < this.state.chipmunkNeeded) {\r\n      return;\r\n    }\r\n\r\n    const img = this.imageData;\r\n    const w = img.width;\r\n    const h = img.height;\r\n    const x = cell.x - Math.trunc(w / 2);\r\n    const y = cell.y - Math.trunc(h / 2);\r\n    const d = new Uint32Array(this.imageData.data.buffer);\r\n    for (let i = 0; i < h; ++i) {\r\n      for (let j = 0; j < w; ++j) {\r\n        const imgColor = d[i * w + j];\r\n        if (imgColor && y + i >= 0 && y + i < BoardHeight && x + j >= 0 && x + j < BoardWidth) {\r\n          const bgColor = this._lines[y + i] ? this._lines[y + i][x + j].color : 0;\r\n          const color = imgColorToInt(imgColor, bgColor);\r\n          if (color !== bgColor) {\r\n            this._queue.push({\r\n              x: x + j,\r\n              y: y + i,\r\n              color,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      rendering: false,\r\n    })\r\n\r\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\r\n    await this._pingQueue(false);\r\n  }\r\n\r\n  async drawPixel(cell) {\r\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\r\n      return;\r\n    }\r\n    const balance = this.state.account ? this.state.account.chipmunkBalance : 0;\r\n    if (balance - this.state.pendingPixels < 1) {\r\n      return;\r\n    }\r\n\r\n    const bgColor = this._lines[cell.y] ? this._lines[cell.y][cell.x].color : 0;\r\n    const cb = (this.state.currentColor & 255);\r\n    const cg = ((this.state.currentColor >> 8) & 255);\r\n    const cr = ((this.state.currentColor >> 16) & 255);\r\n    const color = rgbaToInt(cr, cg, cb, this.state.alpha, bgColor);\r\n\r\n    if (this._pending[cell.y][cell.x] !== color && this._lines[cell.y][cell.x].color !== color) {\r\n      this._pending[cell.y][cell.x] = color;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    this._queue.push({\r\n      x: cell.x,\r\n      y: cell.y,\r\n      color,\r\n    });\r\n\r\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\r\n    await this._pingQueue(false);\r\n  }\r\n\r\n  parseAccount(account, accountId) {\r\n    if (!account) {\r\n      account = {\r\n        accountId,\r\n        accountIndex: -1,\r\n        chipmunkBalance: 25.0,\r\n        acornBalance: 0.0,\r\n        numPixels: 0,\r\n        farmingPreference: Berry.Chipmunk,\r\n      }\r\n    } else {\r\n      account = {\r\n        accountId: account.account_id,\r\n        accountIndex: account.account_index,\r\n        chipmunkBalance: parseFloat(account.chipmunk_balance) / this._pixelCost,\r\n        acornBalance: parseFloat(account.acorn_balance) / this._pixelCost,\r\n        numPixels: account.num_pixels,\r\n        farmingPreference: account.farming_preference,\r\n      }\r\n    }\r\n    account.startTime = new Date().getTime();\r\n    account.chipmunkPixels = (account.farmingPreference === Berry.Chipmunk) ? (account.numPixels + 1) : 0;\r\n    account.acornPixels = (account.farmingPreference === Berry.Acorn) ? (account.numPixels) : 0;\r\n    account.chipmunkRewardPerMs = account.chipmunkPixels / (24 * 60 * 60 * 1000);\r\n    account.acornRewardPerMs = account.acornPixels / (24 * 60 * 60 * 1000);\r\n    return account;\r\n  }\r\n\r\n  async getAccount(accountId) {\r\n    return this.parseAccount(\r\n      await this._contract.get_account({account_id: accountId}),\r\n      accountId\r\n    );\r\n  }\r\n\r\n  async getAccountByIndex(accountIndex) {\r\n    return this.parseAccount(\r\n      await this._contract.get_account_by_index({account_index: accountIndex}),\r\n      \"unknown\",\r\n    );\r\n  }\r\n\r\n  async refreshAccountStats() {\r\n    let account = await this.getAccount(this._accountId);\r\n    if (this._balanceRefreshTimer) {\r\n      clearInterval(this._balanceRefreshTimer);\r\n      this._balanceRefreshTimer = null;\r\n    }\r\n\r\n    this.setState({\r\n      pendingPixels: this._pendingPixels.length + this._queue.length,\r\n      farmingAcorn: account.farmingPreference === Berry.Acorn,\r\n      account,\r\n    });\r\n\r\n    this._balanceRefreshTimer = setInterval(() => {\r\n      const t = new Date().getTime() - account.startTime;\r\n      this.setState({\r\n        account: Object.assign({}, account, {\r\n          chipmunkBalance: account.chipmunkBalance + t * account.chipmunkRewardPerMs,\r\n          acornBalance: account.acornBalance + t * account.acornRewardPerMs,\r\n        }),\r\n        pendingPixels: this._pendingPixels.length + this._queue.length,\r\n      });\r\n    }, 100);\r\n  }\r\n\r\n  async _initNear() {\r\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\r\n    const near = await nearAPI.connect(Object.assign({deps: {keyStore}}, NearConfig));\r\n    this._keyStore = keyStore;\r\n    this._near = near;\r\n\r\n    this._walletConnection = new nearAPI.WalletConnection(near, NearConfig.contractName);\r\n    this._accountId = this._walletConnection.getAccountId();\r\n\r\n    this._account = this._walletConnection.account();\r\n    this._contract = new nearAPI.Contract(this._account, NearConfig.contractName, {\r\n      viewMethods: ['get_account', 'get_account_by_index', 'get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\r\n      changeMethods: ['draw', 'buy_tokens', 'select_farming_preference'],\r\n    });\r\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\r\n    if (this._accountId) {\r\n      await this.refreshAccountStats();\r\n    }\r\n    this._lineVersions = Array(BoardHeight).fill(-1);\r\n    this._lines = Array(BoardHeight).fill(false);\r\n    this._pending = Array(BoardHeight).fill(false);\r\n    this._pending.forEach((v, i, a) => a[i] = Array(BoardWidth).fill(-1));\r\n    await this.refreshBoard(true);\r\n  }\r\n\r\n  async refreshBoard(forced) {\r\n    if (this._refreshBoardTimer) {\r\n      clearTimeout(this._refreshBoardTimer);\r\n      this._refreshBoardTimer = null;\r\n    }\r\n    const t = new Date().getTime();\r\n    if (t < this._stopRefreshTime) {\r\n      this._refreshBoardTimer = setTimeout(async () => {\r\n        await this.refreshBoard(false);\r\n      }, RefreshBoardTimeout);\r\n    }\r\n\r\n    if (!forced && document.hidden) {\r\n      return;\r\n    }\r\n\r\n    let lineVersions = await this._contract.get_line_versions();\r\n    let needLines = [];\r\n    for (let i = 0; i < BoardHeight; ++i) {\r\n      if (lineVersions[i] !== this._lineVersions[i]) {\r\n        needLines.push(i);\r\n      }\r\n    }\r\n    let requestLines = []\r\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\r\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\r\n    }\r\n\r\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\r\n    results = results.flat();\r\n    requestLines = requestLines.flat();\r\n    for (let i = 0; i < requestLines.length; ++i) {\r\n      let lineIndex = requestLines[i];\r\n      let line = decodeLine(results[i]);\r\n      this._lines[lineIndex] = line;\r\n    }\r\n\r\n    this._lineVersions = lineVersions;\r\n    this._refreshOwners();\r\n    this.renderCanvas();\r\n  }\r\n\r\n  _refreshOwners() {\r\n    const counts = {};\r\n    this._lines.flat().forEach((cell) => {\r\n      counts[cell.ownerIndex] = (counts[cell.ownerIndex] || 0) + 1;\r\n    })\r\n    delete counts[0];\r\n    const sortedKeys = Object.keys(counts).sort((a, b) => counts[b] - counts[a]);\r\n    this.setState({\r\n      owners: sortedKeys.map((accountIndex) => {\r\n        accountIndex = parseInt(accountIndex);\r\n        return {\r\n          accountIndex,\r\n          numPixels: counts[accountIndex],\r\n        }\r\n      })\r\n    })\r\n    sortedKeys.forEach(async (accountIndex) => {\r\n      accountIndex = parseInt(accountIndex);\r\n      if (!(accountIndex in this._accounts) || counts[accountIndex] !== (this._oldCounts[accountIndex] || 0)) {\r\n        try {\r\n          this._accounts[accountIndex] = await this.getAccountByIndex(accountIndex);\r\n        } catch (err) {\r\n          console.log(\"Failed to fetch account index #\", accountIndex, err)\r\n        }\r\n        this.setState({\r\n          accounts: Object.assign({}, this._accounts),\r\n        })\r\n      }\r\n    })\r\n    this.setState({\r\n      accounts: Object.assign({}, this._accounts),\r\n    })\r\n    this._oldCounts = counts;\r\n  }\r\n\r\n  renderCanvas() {\r\n    if (!this._context || !this._lines) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this._context;\r\n\r\n    for (let i = 0; i < BoardHeight; ++i) {\r\n      const line = this._lines[i];\r\n      if (!line) {\r\n        continue;\r\n      }\r\n      for (let j = 0; j < BoardWidth; ++j) {\r\n        const p = line[j];\r\n        ctx.fillStyle = intToColor(p.color);\r\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\r\n        if (this.state.highlightedAccountIndex >= 0) {\r\n          if (p.ownerIndex !== this.state.highlightedAccountIndex) {\r\n            ctx.fillStyle = 'rgba(32, 32, 32, 0.8)';\r\n            ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth / 2, CellHeight / 2);\r\n            ctx.fillRect((j + 0.5) * CellWidth, (i + 0.5) * CellHeight, CellWidth / 2, CellHeight / 2);\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n            ctx.fillRect(j * CellWidth, (i + 0.5) * CellHeight, CellWidth / 2, CellHeight / 2);\r\n            ctx.fillRect((j + 0.5) * CellWidth, i * CellHeight, CellWidth / 2, CellHeight / 2);\r\n          } else {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.lineWidth = 0.5;\r\n            ctx.rect(j * CellWidth + 0.5, i * CellHeight + 0.5, CellWidth - 1, CellHeight - 1);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._pendingPixels.concat(this._queue).forEach((p) => {\r\n      ctx.fillStyle = intToColor(p.color);\r\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\r\n    })\r\n\r\n    if (this.state.selectedCell) {\r\n      const c = this.state.selectedCell;\r\n      if (this.state.rendering) {\r\n        const img = this.imageData;\r\n        const w = img.width;\r\n        const h = img.height;\r\n        const x = c.x - Math.trunc(w / 2);\r\n        const y = c.y - Math.trunc(h / 2);\r\n        const d = new Uint32Array(this.imageData.data.buffer);\r\n        for (let i = 0; i < h; ++i) {\r\n          for (let j = 0; j < w; ++j) {\r\n            const color = d[i * w + j];\r\n            if (color && y + i >= 0 && y + i < BoardHeight && x + j >= 0 && x + j < BoardWidth) {\r\n              const bgColor = this._lines[y + i] ? this._lines[y + i][x + j].color : 0;\r\n              ctx.fillStyle = intToColor(imgColorToInt(color, bgColor));\r\n              ctx.fillRect((x + j) * CellWidth, (y + i) * CellHeight, CellWidth, CellHeight);\r\n            }\r\n          }\r\n        }\r\n      } else if (this.state.pickingColor) {\r\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\r\n        ctx.lineWidth = CellWidth * 4;\r\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\r\n        ctx.lineWidth = CellWidth * 2;\r\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n      } else {\r\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\r\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\r\n        ctx.fillRect(c.x * CellWidth, (c.y + 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\r\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\r\n        ctx.fillRect((c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\r\n\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 3;\r\n        ctx.fillStyle = intToColor(this.state.currentColor);\r\n        ctx.strokeStyle = intToColor(this.state.currentColor);\r\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n      }\r\n\r\n    }\r\n\r\n\r\n    if (!this.state.boardLoaded) {\r\n      this.setState({\r\n        boardLoaded: true\r\n      })\r\n    }\r\n  }\r\n\r\n  async requestSignIn() {\r\n    const appTitle = 'Hibernation Harvest';\r\n    await this._walletConnection.requestSignIn(\r\n      NearConfig.contractName,\r\n      appTitle\r\n    )\r\n  }\r\n\r\n  async logOut() {\r\n    this._walletConnection.signOut();\r\n    this._accountId = null;\r\n    this.setState({\r\n      signedIn: !!this._accountId,\r\n      accountId: this._accountId,\r\n    })\r\n  }\r\n\r\n  async alphaColorChange(c) {\r\n    this.setState({\r\n      alpha: c.rgb.a,\r\n    }, () => {\r\n      this.changeColor(c, c.rgb.a)\r\n    });\r\n  }\r\n\r\n  hueColorChange(c) {\r\n    this.setState({\r\n      gammaColors: generateGamma(c.hsl.h)\r\n    })\r\n    this.changeColor(c)\r\n  }\r\n\r\n  saveColor() {\r\n    const newColor = intToColor(this.state.currentColor);\r\n    const index = this.state.colors.indexOf(newColor);\r\n    if (index >= 0) {\r\n      this.state.colors.splice(index, 1);\r\n    }\r\n    this.setState({\r\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\r\n    });\r\n  }\r\n\r\n  changeColor(c, alpha) {\r\n    alpha = alpha || 1.0;\r\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\r\n    c.hex = intToColorWithAlpha(currentColor, alpha);\r\n    c.rgb.a = alpha;\r\n    c.hsl.a = alpha;\r\n    c.hsv.a = alpha;\r\n    this.setState({\r\n      pickerColor: c,\r\n      alpha,\r\n      currentColor,\r\n    }, () => {\r\n      this.renderCanvas();\r\n    })\r\n  }\r\n\r\n  async buyTokens(amount) {\r\n    const requiredBalance = PixelPrice.muln(amount);\r\n    await this._contract.buy_tokens({}, new BN(\"30000000000000\"), requiredBalance);\r\n  }\r\n\r\n  setHover(accountIndex, v) {\r\n    if (v) {\r\n      this.setState({\r\n        highlightedAccountIndex: accountIndex,\r\n      }, () => {\r\n        this.renderCanvas();\r\n      })\r\n    } else if (this.state.highlightedAccountIndex === accountIndex) {\r\n      this.setState({\r\n        highlightedAccountIndex: -1,\r\n      }, () => {\r\n        this.renderCanvas();\r\n      })\r\n    }\r\n  }\r\n\r\n  async switchBerry(farmingAcorn) {\r\n    this.setState({\r\n      farmingAcorn,\r\n    })\r\n    await this._contract.select_farming_preference({\r\n      berry: farmingAcorn ? Berry.Acorn : Berry.Chipmunk,\r\n    });\r\n    await this.refreshAccountStats();\r\n  }\r\n\r\n  async renderImg(img, chipmunkNeeded) {\r\n    this.imageData = img;\r\n    this.setState({\r\n      weaponsOn: false,\r\n      weaponsCodePosition: 0,\r\n      rendering: true,\r\n      pickingColor: false,\r\n      chipmunkNeeded\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const content = !this.state.connected ? (\r\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\r\n    ) : (this.state.signedIn ? (\r\n        <div>\r\n          <div className=\"float-right\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={() => this.logOut()}>Log out ({this.state.accountId})</button>\r\n          </div>\r\n          <div className=\"your-balance\">\r\n            Balance: <Balance\r\n              account={this.state.account}\r\n              pendingPixels={this.state.pendingPixels}\r\n              detailed={true}\r\n          />\r\n          <div>\r\n            Farming preference:\r\n            <Switch\r\n                onChange={(e) => this.switchBerry(e)}\r\n                checked={this.state.farmingAcorn}\r\n                className=\"react-switch\"\r\n                height={30}\r\n                width={70}\r\n                offColor=\"#666\"\r\n                onColor=\"#666\"\r\n                uncheckedIcon={<div className=\"switch-berry chipmunk\">{Chipmunk}</div>}\r\n                checkedIcon={<div className=\"switch-berry acorn\">{Acorn}</div>}\r\n            />\r\n          </div>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.buyTokens(10)}>Buy <span className=\"font-weight-bold\">25{Chipmunk}</span> for <span className=\"font-weight-bold\">Ⓝ0.1</span></button>{' '}\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.buyTokens(40)}>Buy <span className=\"font-weight-bold\">100{Chipmunk}</span> for <span className=\"font-weight-bold\">Ⓝ0.4</span></button>{' '}\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.buyTokens(100)}>Buy <span className=\"font-weight-bold\">250{Chipmunk}</span> for <span className=\"font-weight-bold\">Ⓝ1</span></button>{' '}\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => this.buyTokens(500)}>DEAL: Buy <span className=\"font-weight-bold\">1500{Chipmunk}</span> for <span className=\"font-weight-bold\">Ⓝ5</span></button>\r\n          </div>\r\n          <div className=\"color-picker\">\r\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" onChange={(c) => this.hueColorChange(c)}/>\r\n            <AlphaPicker color={ this.state.pickerColor } width=\"100%\" onChange={(c) => this.alphaColorChange(c)}/>\r\n            <div className={this.state.alpha >= 0.75 ? \"display-warning\" : \"hidden\"}>\r\n              <span role=\"img\" aria-label=\"warning\">⚠️</span>️ Please! Don't destroy art! If you just want to farm {Acorn}, just draw with low opacity.\r\n              <span role=\"img\" aria-label=\"pray\">🙏</span>️\r\n            </div>\r\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\r\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\r\n          </div>\r\n        </div>\r\n    ) : (\r\n        <div style={{marginBottom: \"10px\"}}>\r\n          <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\r\n        </div>\r\n    ));\r\n    const weapons = this.state.weaponsOn ? (\r\n      <div>\r\n        <Weapons\r\n          account={this.state.account}\r\n          renderIt={(img, chipmunkNeeded) => this.renderImg(img, chipmunkNeeded)}/>\r\n      </div>\r\n    ) : \"\";\r\n    return (\r\n      <div>\r\n        <div class=\"header\">\r\n          <h2>{Acorn} Hibernation Harvest {Chipmunk}</h2>{' '}\r\n          <a\r\n            className=\"btn btn-outline-none\"\r\n            href=\"https://farm.berryclub.io\">Tree Farm {Seedling}\r\n          </a>\r\n          <a\r\n            className=\"btn btn-outline-none\"\r\n            href=\"https://app.ref.finance/\">Acorn Market {Acorn}\r\n          </a>\r\n          {/* <a\r\n            className=\"btn btn-outline-none\"\r\n            href=\"https://berry.cards\">[BETA] Berry Cards {Pepper}\r\n          </a> */}\r\n          {content}\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div>\r\n              <div>\r\n                <canvas ref={this.canvasRef}\r\n                        width={600}\r\n                        height={600}\r\n                        className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\r\n\r\n                </canvas>\r\n              </div>\r\n            </div>\r\n            <div className=\"leaderboard\">\r\n              <div>\r\n                <Leaderboard\r\n                  owners={this.state.owners}\r\n                  accounts={this.state.accounts}\r\n                  setHover={(accountIndex, v) => this.setHover(accountIndex, v)}\r\n                  selectedOwnerIndex={this.state.selectedOwnerIndex}\r\n                  highlightedAccountIndex={this.state.highlightedAccountIndex}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"padded\">\r\n          {this.state.signedIn ? (<div>\r\n            <iframe title=\"irc\" className=\"irc\" frameBorder=\"0\" src={`https://kiwiirc.com/client/irc.kiwiirc.com/?nick=${this.state.ircAccountId}#HibernationHarvest`} ></iframe>\r\n          </div>) : \"\"}\r\n        {/* </div>\r\n        <div className=\"padded\">\r\n          <div className=\"video-container\">\r\n            <iframe title=\"youtube3\" className=\"youtube\" src=\"https://www.youtube.com/embed/wfTa-Kgw2DM\" frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen></iframe>\r\n          </div> */}\r\n        {/* </div>\r\n        <div className=\"padded\">\r\n          <div className=\"video-container\">\r\n            <iframe title=\"youtube2\" className=\"youtube\" src=\"https://www.youtube.com/embed/PYF6RWd7ZgI\" frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen></iframe>\r\n          </div> */}\r\n        {/* </div>\r\n        <div className=\"padded\">\r\n          <div className=\"video-container\">\r\n            <iframe title=\"youtube\" className=\"youtube\" src=\"https://www.youtube.com/embed/lMSWhCwstLo\" frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen></iframe>\r\n          </div> */}\r\n        </div>\r\n        {weapons}\r\n        {/* <a className=\"github-fork-ribbon right-bottom fixed\" href=\"https://github.com/evgenykuzyakov/berryclub\" data-ribbon=\"Fork me on GitHub\"\r\n           title=\"Fork me on GitHub\">Fork me on GitHub</a> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Balance = (props) => {\r\n  const account = props.account;\r\n  if (!account) {\r\n    return \"\";\r\n  }\r\n  const fraction = props.detailed ? 3: 1;\r\n  const chipmunkBalance = account.chipmunkBalance - (props.pendingPixels || 0);\r\n  const chipmunkFarm = (account.chipmunkPixels > 0) ? (\r\n    <span>\r\n      {'(+'}<span className=\"font-weight-bold\">{account.chipmunkPixels}</span>{Chipmunk}{'/day)'}\r\n    </span>\r\n  ) : \"\";\r\n  const acornFarm = (account.acornPixels > 0) ? (\r\n    <span>\r\n      {'(+'}<span className=\"font-weight-bold\">{account.acornPixels}</span>{Acorn}{'/day)'}\r\n    </span>\r\n  ) : \"\";\r\n  return (\r\n    <span className=\"balances font-small\">\r\n      <span className=\"font-weight-bold\">{chipmunkBalance.toFixed(fraction)}</span>{Chipmunk}{' '}\r\n      <span className=\"font-weight-bold\">{account.acornBalance.toFixed(fraction)}</span>{Acorn}{' '}\r\n      {chipmunkFarm}\r\n      {acornFarm}\r\n      {\r\n        props.pendingPixels ? <span> ({props.pendingPixels} pending)</span> : \"\"\r\n      }\r\n    </span>\r\n  );\r\n};\r\n\r\nconst Leaderboard = (props) => {\r\n  const owners = props.owners.map((owner) => {\r\n    if (owner.accountIndex in props.accounts) {\r\n      owner.account = props.accounts[owner.accountIndex];\r\n    }\r\n    return <Owner\r\n      key={owner.accountIndex}\r\n      {...owner}\r\n      isSelected={owner.accountIndex === props.selectedOwnerIndex}\r\n      setHover={(v) => props.setHover(owner.accountIndex, v)}\r\n      isHighlighted={owner.accountIndex === props.highlightedAccountIndex}\r\n    />\r\n  })\r\n  return (\r\n    <table className=\"table table-hover table-sm\"><tbody>{owners}</tbody></table>\r\n  );\r\n};\r\n\r\nconst Owner = (props) => {\r\n  const account = props.account;\r\n  return (\r\n    <tr onMouseEnter={() => props.setHover(true)}\r\n        onMouseLeave={() => props.setHover(false)}\r\n        className={props.isSelected ? \"selected\" : \"\"}>\r\n      <td>\r\n        {account ? <Account accountId={account.accountId} /> : \"...\"}\r\n      </td>\r\n      <td className=\"text-nowrap\">\r\n        <small>\r\n          <Balance account={account} />\r\n        </small>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst Account = (props) => {\r\n  const accountId = props.accountId;\r\n  const shortAccountId = (accountId.length > 6 + 6 + 3) ?\r\n    (accountId.slice(0, 6) + '...' + accountId.slice(-6)) :\r\n    accountId;\r\n  return <a className=\"account\"\r\n            href={`https://wayback.berryclub.io/${accountId}`}>{shortAccountId}</a>\r\n}\r\n\r\nexport default App;\r\n","import \"./Weapons.scss\";\r\nimport React from 'react';\r\nimport Files from \"react-files\";\r\n\r\nconst Chipmunk = <span role=\"img\" aria-label=\"seedling\" className=\"berry\">🥑</span>;\r\n\r\nexport class Weapons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      width: 48,\r\n      height: 28,\r\n      seedlingNeeded: 100,\r\n      lockedAspect: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = this.canvasRef.current;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.sourceImage = new Image();\r\n    this.sourceImage.onload = () => {\r\n      this.draw();\r\n    }\r\n    this.sourceImage.src = \"/bfg.png\";\r\n  }\r\n\r\n  draw() {\r\n    const sourceImage = this.sourceImage;\r\n    const canvas = this.canvas;\r\n    const ctx = this.ctx;\r\n    const width = this.state.width;\r\n    const height = this.state.height;\r\n\r\n    // Create a canvas with the desired dimensions\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    canvas.style.width = (width * 10) + 'px';\r\n    canvas.style.height = (height * 10) + 'px';\r\n\r\n    // Scale and draw the source image to the canvas\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.imageSmoothingQuality = \"low\";\r\n    ctx.drawImage(sourceImage, 0, 0, width, height);\r\n\r\n    const imageData = ctx.getImageData(0, 0, width, height);\r\n    this.imageData = imageData;\r\n    this.setState({\r\n      chipmunkNeeded: new Uint32Array(imageData.data.buffer).reduce((sum, v) => sum + (v ? 1 : 0), 0),\r\n    });\r\n  }\r\n\r\n  async onFilesChange(f) {\r\n    const sourceImage = this.sourceImage;\r\n    let reader = new FileReader();\r\n\r\n    reader.readAsDataURL(f[0]);\r\n\r\n    sourceImage.onload = () => {\r\n      let width = sourceImage.naturalWidth;\r\n      let height = sourceImage.naturalHeight;\r\n      if (sourceImage.naturalWidth > 50 || sourceImage.naturalHeight > 50) {\r\n        const aspect = width / height;\r\n        width = Math.round(20 * Math.min(1, aspect));\r\n        height = Math.round(20 * Math.min(1, 1 / aspect));\r\n      }\r\n      this.setState({\r\n        width: Math.min(50, Math.max(1, width)),\r\n        height: Math.min(50, Math.max(1, height)),\r\n      });\r\n      this.draw();\r\n\r\n    }\r\n\r\n    reader.onload = function(event) {\r\n      sourceImage.src = event.target.result;\r\n    };\r\n  }\r\n\r\n  async onFilesError(e, f) {\r\n    console.log(e, f);\r\n  }\r\n\r\n  updateVal(key, value) {\r\n    value = Math.min(50, Math.max(1, value));\r\n    if (this.state.lockedAspect) {\r\n      const aspect = this.sourceImage.naturalWidth / this.sourceImage.naturalHeight;\r\n      let width, height;\r\n      if (key === 'width') {\r\n        width = value;\r\n        height = Math.round(width / aspect);\r\n      } else {\r\n        height = value;\r\n        width = Math.round(height * aspect);\r\n      }\r\n      this.setState({\r\n        width: Math.min(50, Math.max(1, width)),\r\n        height: Math.min(50, Math.max(1, height)),\r\n      }, () => {\r\n        this.draw();\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [key]: value,\r\n      }, () => {\r\n        this.draw();\r\n      })\r\n    }\r\n  }\r\n\r\n  changeLockedAspect() {\r\n    this.setState({\r\n      lockedAspect: !this.state.lockedAspect,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weapons-popup\">\r\n        <div className=\"weapons-content\">\r\n          <h2>So you need a BFG?</h2>\r\n          <div>\r\n            <Files\r\n              type=\"button\"\r\n              className='btn'\r\n              onChange={(f) => this.onFilesChange(f)}\r\n              onError={(e, f) => this.onFilesError(e, f)}\r\n              multiple={false}\r\n              accepts={['image/*']}\r\n              minFileSize={1}\r\n              clickable\r\n            >\r\n              Click to upload an image\r\n            </Files>\r\n          </div>\r\n          <div>\r\n            <label>Width</label>\r\n            <input type=\"number\" value={this.state.width}\r\n                   min={1}\r\n                   max={50}\r\n                   onChange={(e) => this.updateVal('width', e.target.value)} />\r\n            {' '}\r\n            <button\r\n              className={\"btn btn-outline-secondary low-right-margin\" + (this.state.lockedAspect ? \" btn-pressed\" : \" btn-not-pressed\")}\r\n              onClick={() => this.changeLockedAspect()}\r\n            >\r\n              <span role=\"img\" aria-label=\"link\" className=\"berry\">🔗</span>\r\n            </button>\r\n            <label>Height</label>\r\n            <input type=\"number\" value={this.state.height}\r\n                   min={1}\r\n                   max={50}\r\n                   onChange={(e) => this.updateVal('height', e.target.value)} />\r\n          </div>\r\n          <button\r\n            className='btn btn-success btn-large'\r\n            disabled={!this.props.account || this.props.account.chipmunkBalance < this.state.chipmunkNeeded}\r\n            onClick={() => this.props.renderIt(this.imageData, this.state.chipmunkNeeded)}\r\n          >\r\n            Render on the board using {this.state.chipmunkNeeded} {Chipmunk}\r\n          </button>\r\n          <div className=\"canvas-wrapper\">\r\n            <canvas ref={this.canvasRef}\r\n                    width={480}\r\n                    height={280}\r\n                    className=\"draw-preview\">\r\n            </canvas>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}